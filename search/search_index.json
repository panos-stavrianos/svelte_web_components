{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This library is under active development and is not ready to be used yet.</p> <p>This is an experiment!</p> <p>It's a way to see if it's possible to use Svelte web components from Python without a build step.</p>"},{"location":"#why","title":"Why?","text":"<p>I am currently very happy with <code>fastapi</code>, <code>jinja2</code> and <code>htmx</code> for building web applications.</p> <p>But I was needing a way to build small but rich web components.</p> <p>I had try <code>svelte</code> in the past, and I was very impressed by the reactivity and the simplicity of the components. The problem was that I don't to add a build step to my projects.</p> <p>What if there was a way to just write <code>.svelte</code> files and import them in html like <code>.js</code> files?</p>"},{"location":"#how","title":"How?","text":""},{"location":"#what-happens-on-installation","title":"What happens on installation?","text":"<p>When you run <code>pip install svelte-web-components</code> it will do the following:</p> <ul> <li>Download <code>node</code> in <code>~/.svelte-web-components/node</code></li> <li>Copy a base project in <code>~/.svelte-web-components/svete_app</code></li> <li>Install <code>svelte</code> and <code>vite</code> in <code>~/.svelte-web-components/svete_app</code> creating <code>node_modules</code></li> </ul>"},{"location":"#what-happens-at-runtime","title":"What happens at runtime?","text":"<p>When you run initiate Bundle or SvelteFiles instances, it will:</p> <ul> <li>Copy the all the <code>.svelte</code> files from the folder you specify in  <code>~/.svelte-web-components/svete_app/components</code></li> <li>Run <code>vite build</code> in <code>~/.svelte-web-components/svete_app</code> to build the components</li> <li>Save in memory the generated bundles for fast access in the future</li> </ul>"},{"location":"bundle/","title":"Bundle","text":"<p>The Bundle class can generate multiple js bundles and install extra npm packages.</p> <p>The actual build will happen on the initialization of the Bundle instance.</p>"},{"location":"bundle/#usage","title":"Usage","text":""},{"location":"bundle/#simple-example","title":"Simple example","text":"<p>Here we have only one folder with components</p> Python<pre><code>from svelte_web_components import Bundle\n\nbundle = Bundle({\n    \"components\": \"assets/components\",\n})\n\njs_bundle = bundle[\"components\"]\n</code></pre> <p>the js_bundle variable will contain the js code as string.</p>"},{"location":"bundle/#multiple-component-folders","title":"Multiple component folders","text":"<p>In this way you can use <code>code splitting</code> to load only the components that you need.</p> <p>This is only useful if you have some large npm packages that you don't need in all pages.</p> <p>Otherwise, it's better to have only one bundle because the generated js code will almost be the same.</p> Python<pre><code>from svelte_web_components import Bundle\nbundle = Bundle({\n    \"c_home\": \"assets/components/home\",\n    \"c_contact\": \"assets/components/contact\",\n})\n\ncomponents_home = bundle[\"c_home\"]\ncomponents_contact = bundle[\"c_contact\"]\n</code></pre>"},{"location":"bundle/#install-extra-npm-packages","title":"Install extra npm packages","text":"<p>You can install extra npm packages that your components need.</p> Python<pre><code>from svelte_web_components import Bundle\n\nbundle = Bundle({\"components\": \"assets/components\", }, extra_packages=[\"moment\"])\n\njs_bundle = bundle[\"components\"]\n</code></pre>"},{"location":"bundle/#npm-packages-conflicts","title":"Npm packages conflicts","text":"<p>For now there is no way to resolve npm packages conflicts, as all the packages are installed in the same folder, even for different projects. So if you have two projects that use different versions of the same package, the last one that will be installed will overwrite the other one.</p> <p>This limitation will be fixed in the future, maybe by installing the packages in a different folder for each project.</p>"},{"location":"components/","title":"Components","text":"<p>You can probably do most of the things that you can do with <code>svelte web components</code>.</p> <p>Check out the svelte web components documentation.</p> <p>Create one or more folders to store your components, for example <code>assets/components</code>.</p> <p>You can nest components in sub-folders with no problem.</p>"},{"location":"components/#svelte-retag","title":"svelte-retag","text":"<p><code>&lt;svelte:options/&gt;</code> is not supported because this library uses svelte-retag .</p> <p>The reason is to overcome svelte limitations with custom elements. In specific, the fact that when shadow DOM is disabled, the <code>&lt;slot/&gt;</code> is not working. Check out this discussion.</p> <p>If the svelte team decides to fix this issue, we can drop svelte-retag and use the base svelte library.</p> <p>Svelte-retag wants to support <code>&lt;svelte:options/&gt;</code> in the future, so we will be able to use it when it's ready.</p> <p>Shadow DOM is disabled by default, currently there is no way to enable it, but it will be added in the future.</p>"},{"location":"components/#example-component","title":"Example component","text":"<p>Let's create a simple component that increments a counter when you click on a button.</p> <p>Make sure that your file name is CamelCase and comprised of at least two words. This important because the component name will be the file name converted to kebab-case.</p> <p>For example <code>MyComponent.svelte</code> will be <code>&lt;my-component&gt;&lt;/my-component&gt;</code>.</p> MyCounter.svelte<pre><code>&lt;script&gt;\nexport let count = 0;\n$: count = Number(count) || 0; // convert to number\n\nconst increment = () =&gt; {\ncount += 1;\n};\n&lt;/script&gt;\n\n&lt;button on:click={increment}&gt;\n    count is {count}\n&lt;/button&gt;\n</code></pre>"},{"location":"components/#use-npm-packages","title":"Use npm packages","text":"<p>You can use npm packages in your components, but don't forget to add them to the <code>extra_packages</code> argument of the <code>Bundle</code> or <code>SvelteFiles</code> class.</p> MyCounter.svelte<pre><code>&lt;script&gt;\nimport moment from 'moment'\nlet count = 0;\n$: count = Number(count) || 0; // convert to number\n\nlet time = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\nconst increment = () =&gt; {\ncount += 1;\ntime = moment().format(\"MMMM Do YYYY, h:mm:ss a\");\n};\n&lt;/script&gt;\n\n&lt;button on:click={increment}&gt;\n    count is {count}\n&lt;/button&gt;\n&lt;h1&gt;The time is {time}&lt;/h1&gt;\n</code></pre>"},{"location":"contribute/","title":"About","text":"<p>This project is developed and maintained by Panos Stavrianos on behalf of Orbit Systems.</p>"},{"location":"contribute/#contribute","title":"Contribute","text":"<p>My knowledge of Svelte and Python packaging is limited, so I would greatly appreciate your help in making this project even better.</p> <p>Please feel free to open an issue or a pull request if you have any suggestions.</p>"},{"location":"contribute/#roadmap","title":"Roadmap","text":"<ul> <li> Write tests</li> <li> Resolve conflicts with npm dependencies</li> <li> Improve documentation</li> <li> Add Windows support</li> <li> Add Mac support</li> <li> Explore better ways to install Node.js</li> </ul>"},{"location":"contribute/#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"fastapi_integration/","title":"FastAPI integration","text":"<p>Using the <code>SvelteFiles</code> class you can integrate your components with FastAPI very easily and with good performance.</p>"},{"location":"fastapi_integration/#extra-features","title":"Extra features","text":"<ul> <li>Generate input <code>&lt;script&gt;</code> elements for your components and make them available in your html template.</li> <li>Automatic mount of the components.</li> <li>Proper cache handling.</li> </ul>"},{"location":"fastapi_integration/#usage","title":"Usage","text":"<p>Initiate a <code>SvelteFiles</code> instance with the path to your components folder and a name. Also pass the <code>templates</code> and <code>app</code> arguments.</p> <p>This also support multiple component folders</p> Python<pre><code>from svelte_web_components import SvelteFiles \napp = FastAPI()\ntemplates = Jinja2Templates(directory=\"templates\")\n\nsvelte = SvelteFiles({\n    \"c_home\": \"assets/components/home\",\n    \"c_contact\": \"assets/components/contact\",\n}, templates=templates, app=app)\n</code></pre> <p>In your html file, import all js bundles:</p> HTML<pre><code>&lt;my-component name=\"John\"&gt;&lt;/my-component&gt;\n{{ svelte_scripts | safe }}\n</code></pre> <p>You can also import only the js bundles that you need:</p> HTML<pre><code>&lt;my-component name=\"John\"&gt;&lt;/my-component&gt;\n{{ svelte_script[\"c_home\"] | safe }}\n</code></pre>"},{"location":"fastapi_integration/#alternative-usage","title":"Alternative usage","text":""},{"location":"fastapi_integration/#no-automatic-mount","title":"No automatic mount","text":"<p>If you don't want to automatically mount the components, you can use the <code>SvelteFiles</code> class like this:</p> Python<pre><code>from svelte_web_components import SvelteFiles\napp = FastAPI()\ntemplates = Jinja2Templates(directory=\"templates\")\n\nsvelte = SvelteFiles({\n    \"/components/c1\": \"templates/components/c1\",\n    \"/components/c2\": \"templates/components/c2\"\n}, )\n\napp.mount(\"/components/c1\", svelte)\napp.mount(\"/components/c2\", svelte)\n</code></pre>"},{"location":"fastapi_integration/#no-automatic-input-script-generation-and-insertion","title":"No automatic input script generation and insertion","text":"HTML<pre><code>&lt;my-component name=\"John\"&gt;&lt;/my-component&gt;\n&lt;script src=\"/components/c1/\" type=\"module\"&gt;&lt;/script&gt;\n&lt;script src=\"/components/c2/\" type=\"module\"&gt;&lt;/script&gt;\n</code></pre> <p>A small detail, notice that the <code>src</code> attribute ends with <code>/</code>, if we remove it, the fastapi will return redirect to the same url with <code>/</code> at the end. So we add it to prevent an extra round trip to the server.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#install","title":"Install","text":"<p>The library is on PyPI, so you can install it with pip:</p> Bash<pre><code>pip install svelte-web-components\n# or \npip install \"svelte_web_components[fastapi]\"\n</code></pre>"},{"location":"usage/#create-a-component","title":"Create a component","text":"<p>Create a folder to store your components, for example <code>assets/components</code>.</p> <p>In there create a file <code>MyComponent.svelte</code> for your component:</p> MyComponent.svelte<pre><code>&lt;script&gt;\nexport let name = 'World';\n&lt;/script&gt;\n\n&lt;h1&gt;Hello {name}!&lt;/h1&gt;\n</code></pre>"},{"location":"usage/#generate-the-js-bundle","title":"Generate the js bundle","text":"<p>If you are using <code>fastapi</code> see bellow.</p> <p>Flask and other frameworks are not supported yet, but it will be easy to add support for them.</p> <p>Initiate a <code>Bundle</code> instance with the path to your components folder and a name:</p> Python<pre><code>from svelte_web_components import Bundle\n\nbundle = Bundle({\n    \"components\": \"assets/components\",\n})\n\njs_bundle = bundle[\"components\"]\n</code></pre> <p>Now you can use the <code>js_bundle</code> to write it in your html file, or save it in a file and serve it with your framework.</p>"},{"location":"usage/#use-the-component","title":"Use the component","text":"<p>In your html file, import the js bundle:</p> HTML<pre><code>&lt;my-component name=\"John\"&gt;&lt;/my-component&gt;\n\n&lt;script&gt;\n{{ js_bundle | safe }}\n&lt;/script&gt;\n</code></pre> <p>This is not a good way to import the js bundle, because it will be loaded synchronously and will block the page rendering. Also your html file would be huge because this will add inline the js bundle.</p>"},{"location":"usage/#fastapi-integration","title":"FastAPI integration","text":"<p>Generate you components the same way as before.</p> <p>Initiate a <code>SvelteFiles</code> instance with the path to your components folder and a name. Also pass the <code>templates</code> and <code>app</code> arguments.</p> Python<pre><code>from svelte_web_components import SvelteFiles \napp = FastAPI()\ntemplates = Jinja2Templates(directory=\"templates\")\n\nsvelte = SvelteFiles({\n       \"components\": \"assets/components\",\n}, templates=templates, app=app)\n</code></pre> <p>In your html file, import the js bundle:</p> HTML<pre><code>&lt;my-component name=\"John\"&gt;&lt;/my-component&gt;\n{{ svelte_scripts | safe }}\n</code></pre> <p>This will take care of loading the js bundle asynchronously and only once.</p> <p>For more details see the Bundle and FastAPI integration pages.</p>"}]}